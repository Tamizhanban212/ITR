<?xml version="1.0" encoding="utf-8"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>
  
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
    <!-- <param name="use_gui" value="$(arg gui)"/>
    <remap from="/joint_states" to="/cobot/joint_states" /> -->
  </node>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find heal_left)/config/velocity_controller_config.yaml" command="load"/>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="cat '$(find heal_left)/urdf/robot_urdf.urdf'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model medrob -param robot_description"/>

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find heal_left)/rviz/cobot_new.rviz" required="true" />
  
  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
  output="screen" args="joint1_velocity_controller joint2_velocity_controller joint3_velocity_controller joint4_velocity_controller joint5_velocity_controller joint6_velocity_controller joint_state_controller" />

</launch>
